#!/usr/bin/env ruby
$: << 'C:\Users\Nocera Group\Desktop\Data\Mike\noceracode\automate_chi2'
#Must include logging information before requiring automate_chi
@save_path = Dir.pwd
$log_file = File.new(File.join(@save_path, '%s.log' % File.basename($0, '.*')), 'w')
#$log_file.sync = true #do not buffer (doesn't actually work)
#Change working directory to where the automate files are.
Dir.chdir($:.last)
require 'automate_chi_macro.rb'

# Experiment variables
@potential_range = (-0.90..-2.10) #V, also controls direction of scan
@step = -0.10
@sample_time = 300 #sec, of each point
#The sensitivity must be specified as 1e-n where n = [1, 12], because that is
#what the potentiostat can handle. We use a lambda so that sensitivity is
#dynamic as a function of potential.
#@sensitivity = 1e-4 #A/V
@sensitivity_p = lambda do |p|
  s = 1e-3 if p <= @potential_range.first
  s = 1e-2 if p <= -1.2
  s = 1e-1 if p <= -1.5
  return s
end
@sample_interval = 1 #sec between each point sample
@num_passes = 1
@ir_comp = 14.7 #ohm
#Save filename in sprintf format. Leave out .bin/.txt.
#<pass> -> denotes the pass number
#<run>  -> denotes the run number
@save_filename_format = 'ait_p%02<pass>i_%02<run>i' #e.g. ait_p01_02


#We run from high potential to low potential
for pass in 1..@num_passes
  #Since we can't have negative step values (ie. for when we decrement), 
  #we need to generate our potentials by manually specifying the start and
  #end values of our range.
  potentials = (@potential_range.first).step(@potential_range.last, @step)
  potentials = potentials.to_a.map {|x| x.round(3)}
  potentials.reverse! if @even_pass_reverse_direction and pass.even?
  $log.info('Potentials: %s' % potentials.to_s)

  potentials.each_with_index do |p, i|
    @init_e = p
    @sensitivity = @sensitivity_p.call(p)
    @run_time = @sample_time
    @save_filename  = @save_filename_format % {pass: pass, run: i+1}
    run_ait_macro
  end
end
