#!/usr/bin/env ruby

$base_path = 'C:\Users\Pot760Dblack\Dropbox\Electrochemistry\Mike\01-12-2012'

$expt_number = 1
@init_e = 1.2 #V
@total_charge = 6e-3 #C
@sample_interval = 1 #s
@sensitivity = 1e-4 #use three scales
#The two values below are not so important when we specify total charge since
#the automation script can wait for the Information window to end the expt.
@status_check_interval = 6000 #s
@status_max_runtime = 43200 #s

@save_filename = 'ait%i %sV %imC dep MnKMePi pH 3' % [$expt_number, 
                                                      @init_e.to_s.delete('.'),
                                                      (@total_charge * 1000)]
@run_time = 99999 #s (some large value; we use the total_charge to stop expt)


require 'logger' #Must be required before automate_chi.rb!
$log_file = File.new(File.join($base_path, 'ait%i.log' % $expt_number), 'w')
$log_file.sync = true #do not buffer
$log = Logger.new($log_file)
#$log = Logger.new(STDOUT)
$log.level = Logger::DEBUG

require './automate_chi.rb'

begin
  $log.info 'Running AIT experiment with filename: %s' % @save_filename
  es = EchemSoftware.new

  ocp = es.get_open_circuit_potential
  $log.info es.setup_automatic_ir_compensation(ocp)

  es.abort_experiment_at_charge(@total_charge)

  es.setup_amperometric_it_curve(@init_e, @sample_interval, @run_time, 
                                 0, 3, @sensitivity) 
  es.run(@status_check_interval, @status_max_runtime, true)
  es.save_as(@save_filename)
rescue RuntimeError
  $log.error 'RuntimeError: Retrying experiment...'
  #Getting here means that the software has crashed. So let's try to restart
  #it again.
  es.kill
  $log.info 'Killing program and sleeping for a bit...'
  sleep(300) #5 minutes to let instrument rest
  retry
ensure
  if es #when we have errors, es is automatically GC'ed and set to nil.
    $log.info 'Killing program through ensure...'
    es.kill
    es = nil
  end
end
