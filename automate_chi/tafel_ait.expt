#!/usr/bin/env ruby

require 'logger' #Must be required before automate_chi.rb!
#$log_file = File.new('Z:\Labs\noceracode\automate_chi\test.log', 'w')
$log_file = File.new('C:\Users\Nocera Group\Dropbox\Electrochemistry\Mike\04-08-2013\02tafel\tafel.log', 'w')
$log_file.sync = true #do not buffer
$log = Logger.new($log_file)
#$log = Logger.new(STDOUT)
$log.level = Logger::DEBUG

require './automate_chi.rb'
#require '../usbnetpower8800/usbnetpower8800.rb'
#@stir_plate = USBNetPower8800.new
#require '../pH-vwr/pH-vwr.rb'
#@pH_meter = PHVWR.new(5) #COM6

def run_ait
  $log.info '-------------------------------------'
  begin
    $log.info 'Running tafel experiment with filename: %s' % @save_filename
    es = EchemSoftware.new
    es.setup_amperometric_it_curve(@init_e, @sample_interval, @run_time, 
                                   0, 3, @sensitivity) 

    #Another quirk with the software is that iR comp must be called after RDE
    #it seems or else iR comp won't actually be enabled.
    es.setup_manual_ir_compensation(@ir_comp)
	
    #Thread.new {
    #  @stir_plate.on
    #  sleep(@stir_time)
    #  @stir_plate.off
    #}
    es.run(@status_check_interval, @status_max_runtime)
    es.save_as(@save_filename)
	
    #Get pH at final point
    #begin
    #  m = @pH_meter.measure
    #rescue Errno::EACCES  #problem with opening COM port
    #end
    #begin
    #  $log.info 'pH: %f' % m['pH']
    #  $log.info 'Temp: %f' % m['temp']
    #rescue TypeError, NameError
    #  $log.info 'pH meter returned nil'
    #end
  rescue RuntimeError
    $log.error 'RuntimeError: Retrying experiment...'
    #Getting here means that the software has crashed. So let's try to restart
    #it again.
    es.kill
    $log.info 'Killing program and sleeping for a bit...'
    sleep(60) #1 minutes to let instrument rest
    retry
  ensure
    if es #when we have errors, es is automatically GC'ed and set to nil.
      $log.info 'Killing program through ensure...'
      es.kill
      es = nil
    end
  end
  $log.info '-------------------------------------'
  $log.info
  $log_file.flush #since .sync doesn't work for some reason
  print '.'
end

#Experiment variables
@stir_time = 6 #sec.
@collect_time = 1 #sec
#The sensitivity must be specified as 1e-n where n = [1, 12], because that
#is what the potentiostat can handle.
@sensitivity = 1e-5 #see below
@sample_interval = 0.05 #sec
@ir_comp = 14.0 #ohm

#The following is for our own purposes for defining the potential range and step
@potential_range = (0.57..0.68) #V, needs to be from high to low for positive step
#@step = (@potential_range.first - @potential_range.last) / 16.0
@step = 0.005 #V
#@step = 0.01 #V


#We run from high potential to low potential
for pass in 1..2
  potentials = @potential_range.step(@step).to_a.map {|x| x.round(3)}
  potentials.reverse! #Go from high to low
  $log.info('Potentials: %s' % potentials.to_s)
  
  #For each potential, we loop through specified rotation velocities.
  potentials.each_with_index do |p, i|
    @init_e = p

    #Dynamic sensitivity mod
	  #@sensitivity = 1e-3 if p <= 1.7
	  @sensitivity = 1e-4 if p <= 0.68
    @sensitivity = 1e-5 if p <= 0.66
    @sensitivity = 1e-6 if p <= 0.61
	  #Anodize first point
	  if pass == 1 and p == 0.68
	    #@stir_time = 30 * 60 #30 minutes
	    @stir_time = 10 #s
	  else
	    @stir_time = 6 #s
	  end
      
    @run_time = @stir_time + @collect_time 
    @status_check_interval = (@run_time + 5) / 2 #sec

    #When our runtime exceeds the maximum runtime given below, we assume the experi
    #has crashed and exit from loop.
    @status_max_runtime = @run_time + 10 #sec
          
	  p_formatted = '%.3f' % p
    @save_filename  = '%02ip_%s.bin' % [pass, p_formatted.sub('.', '')]
    run_ait
  end
end


#@stir_plate.close
